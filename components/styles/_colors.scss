// These colors are sent from PHP CrewHRM\Helpers\Colors class.
$colors: 'primary', 'secondary', 'tertiary', 'quaternary', 'text', 'text-light', 'text-lighter',
    'text-hint', 'error', 'success', 'warning', 'black', 'white', 'transparent';
$color_for: 'color', 'bg-color';

// Loop through the colors
@mixin colorGenerate($class, $attr) {
    @each $color in $colors {
        // Generate text color classes
        .#{$class}-#{$color} {
            &,
            &[type] {
                // Here [type] is used  to override wp default styles for input fields
                #{$attr}: var(
                    --crewhrm-color-#{$color}
                ); // Usage: bg-color-primary (Style will be applied to itself normally)
            }
        }
    }

    // Loop through the colors again
    @each $color in $colors {
        &.#{$class}-hover-#{$color}:hover {
            &,
            &[type] {
                #{$attr}: var(
                    --crewhrm-color-#{$color}
                ); // Useage: bg-color-hover-primary (Style will be applied to itself on hover)
            }
        }

        &.#{$class}-hover-parent:hover {
            .#{$class}-hover-child-#{$color} {
                &,
                &[type] {
                    #{$attr}: var(
                        --crewhrm-color-#{$color}
                    ); // Usage: bg-color-hover-parent > bg-color-hover-child-primary (Style will be applied upon hovering parent)
                }
            }
        }

        &.#{$class}-active-#{$color} {
            &.active,
            &:focus {
                &,
                &[type] {
                    #{$attr}: var(
                        --crewhrm-color-#{$color}
                    ); // Usage: bg-color-active-primary (Style will be applied to itself when it is focused or has active class)
                }
            }
        }

        &.#{$class}-active-parent {
            &.active,
            &:focus {
                &,
                &[type] {
                    .#{$class}-active-child-#{$color} {
                        #{$attr}: var(
                            --crewhrm-color-#{$color}
                        ); // Usage: bg-color-active-parent > bg-color-active-child-primary (Style will be applied when parent is focused or has active class)
                    }
                }
            }
        }
    }
}

@include colorGenerate('color', 'color');
@include colorGenerate('bg-color', 'background-color');
@include colorGenerate('b-color', 'border-color');

@for $i from 5 through 10 {
    .darken-on-hover--#{$i} {
        &:hover {
            filter: brightness($i/10);
        }
    }
}

/* Box shadows */
.box-shadow-thin {
    box-shadow: 0px 1px 2px 0px rgba(16, 39, 68, 0.08);
}

.box-shadow-thick {
    box-shadow: 0px 10px 20px 0px rgba(16, 39, 68, 0.1);
}
